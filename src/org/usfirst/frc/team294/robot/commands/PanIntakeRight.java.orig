package org.usfirst.frc.team294.robot.commands;

import org.usfirst.frc.team294.robot.Robot;
<<<<<<< HEAD
import org.usfirst.frc.team294.robot.RobotMap;
import org.usfirst.frc.team294.robot.util.PotLimitedSpeedController;
=======
>>>>>>> f57e7292e23d54f075875a7a73a7328ed4278fb6

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class PanIntakeRight extends Command {
<<<<<<< HEAD

	private double error;
	private double relativeDistance = 0;
	private double constant = 0.1;
	//PotLimitedSpeedController toteControllerRight = new PotLimitedSpeedController();
    public PanIntakeRight() {
        requires(Robot.toteGrab);
=======
	
	private int relativeDistance=0;
	
	private int softRightDistanceLimit=15;
	
	//PotLimitedSpeedController toteControllerRight = new PotLimitedSpeedController();
    public PanIntakeRight() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	requires(Robot.toteGrab);
>>>>>>> f57e7292e23d54f075875a7a73a7328ed4278fb6
    }

    // Called just before this Command runs the first time
    protected void initialize() {
<<<<<<< HEAD
    	relativeDistance = Robot.toteGrab.getLeftPosition() - Robot.toteGrab.getRightPosition();
=======
    	relativeDistance=Math.abs(Robot.toteGrab.getLeftMotor().getAnalogInPosition()-Robot.toteGrab.getRightMotor().getAnalogInPosition());
>>>>>>> f57e7292e23d54f075875a7a73a7328ed4278fb6
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
<<<<<<< HEAD
    	error = ((Robot.toteGrab.getLeftPosition() - Robot.toteGrab.getRightPosition()) - relativeDistance) * constant;
    	Robot.toteGrab.setLeftMotor(.8 - error);
    	Robot.toteGrab.setRightMotorSpeed(.8 + error);
=======
    	int checkDistance=Math.abs(Robot.toteGrab.getLeftMotor().getAnalogInPosition()-Robot.toteGrab.getRightMotor().getAnalogInPosition());
    	if(Robot.toteGrab.getRightMotor().getAnalogInPosition()>softRightDistanceLimit)return;
    	float leftSpeed=-1;
    	float rightSpeed=1;
    	if(checkDistance>relativeDistance){
    		rightSpeed-=0.1;
    	}else if(checkDistance<relativeDistance){
    		leftSpeed-=0.1;
    	}
    	Robot.toteGrab.setLeftMotorSpeed(leftSpeed);
    	Robot.toteGrab.setLeftMotorSpeed(rightSpeed);
>>>>>>> f57e7292e23d54f075875a7a73a7328ed4278fb6
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
